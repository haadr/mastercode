#!/usr/bin/python3
from create_confusion_matrix import create_confusion_matrix
from exercise_recording_data import print_data_set_info
from plotgrid import plotgrid

import argparse
import pickle
import re
import sys


def get_m_classes(exercise_recording_data_set, classify_by):
    if classify_by == "exercise":
        m_classes = exercise_recording_data_set.get_exercises()
        m_classes.sort()
        return m_classes
    elif classify_by == "mode":
        m_classes = exercise_recording_data_set.get_modes()
        m_classes.sort()
        return m_classes
    else:
        print("get_m_classes(): Unknown class to classify by.")
        return None


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Generate confusion matrices and classify using k-NN')
    parser.add_argument('inputfile', help="Pickle file generated by calc_all_dtw.py containing an ExerciseRecordingDataSet")

    parser.add_argument('-s', '--sensors',
                        nargs='*',
                        default=[],
                        help="List of required sensors to combine for kNN matching."
                        " If not specified, combine all available.")

    parser.add_argument('-k', '--k-neighbors',
                        default=3,
                        help="Number of neighbors to use for majority voting matches (default 3)")

    parser.add_argument('--class-type',
                        default="exercise",
                        choices=['exercise', 'mode'],
                        help="'exercise' for classification by exercise or 'mode' for classification by error type")

    parser.add_argument('-t', '--data-type',
                        default="quat",
                        help="Data type to use")

    parser.add_argument('-l', '--leave-me-out',
                        choices=['all', 'exact'],
                        default=None,
                        help="set leaveMeOut scheme. Must be 'all' (leave out all with same tsID)"
                        " or 'exact' (leave out all with same tsID and same exercise)")

    parser.add_argument('-d', '--dpi', default=1200, help="Set DPI for the saved figure")
    parser.add_argument('-V', '--verbose', default=False, action="store_true", help="enable verbose mode")
    parser.add_argument('--save', action="store_true", help="save figure to file")
    parser.add_argument('--show', action="store_true", help="show figure")

    args = parser.parse_args()

    exercise_recordings = None

    with open(args.inputfile, 'rb') as f:
        exercise_recording_data_set = pickle.load(f)

    # Detect distance function used
    disttype = re.search('exercise_recording_data_set_([^\W\d_]*)_(.+).pickle', args.inputfile)
    disttype = disttype.groups()[0] if disttype else None
    if disttype is None:
        disttype = "unknown"

    if args.verbose:
        print_data_set_info(exercise_recording_data_set)

    confm = create_confusion_matrix(exercise_recording_data_set,
                                    sensors=args.sensors,
                                    classify_by=args.class_type,
                                    data_type=args.data_type,
                                    k_neighbours=1,
                                    leave_me_out=args.leave_me_out,
                                    verbose=args.verbose)
    if confm is None:
        print("Couldn't create confusion matrix. Check any errors and try running with the -V argument.")
        sys.exit(1)

    title = "confusion_matrix_{disttype}_by_{class_type}_k={k}_sensors_{sensors}_{validation}"\
        .format(disttype=disttype,
                class_type=args.class_type,
                k=args.k_neighbors,
                sensors=args.sensors if len(args.sensors) > 0 else "all",
                validation=("leave_me_out" if args.leave_me_out is None else args.leave_me_out))

    m_classes = get_m_classes(exercise_recording_data_set, args.class_type)
    labels = [ [m_class for m_class in m_classes] + ["Total", "Accy."], [m_class for m_class in m_classes] + ["Total"]]

    if not args.show and not args.save:
        sys.exit(0)
    else:
        plotgrid(confm,
                 show=args.show,
                 dpi=int(args.dpi),
                 title=title,
                 saveFigure=args.save,
                 # saveFigure=False,
                 labels=labels,
                 alpha=0.,
                 normalized=False)

        sys.exit(0)
